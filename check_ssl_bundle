#!/usr/bin/env python3

# Author: Wojciech Dy≈ºewski <mdyzio@icm.edu.pl>
# created: 03/04.2019

# requires python3-openssl

WARN_DAYS = 14
CRIT_DAYS = 7
BUNDLE_FILE = 'bundle.pem'

SPLIT_STRING = '-----BEGIN CERTIFICATE-----'
STATE_OK = 0
STATE_WARNING = 1
STATE_CRITICAL = 2
STATE_UNKNOWN = 3

import datetime
from OpenSSL import crypto
from sys import exit, stderr
import argparse

def debug(message):
    if (args.verbose):
        print(message, file=stderr)

def getCN(cert):
    cn = cert.get_subject().commonName
    if cn:
        return cn
    else:
        return "(null)"

def cert2status(idx, cert):
    def cert_date2text(cert_date):
        date = datetime.datetime.strptime(cert_date.decode('ascii'), '%Y%m%d%H%M%SZ')
        return date.strftime('%Y-%m-%d %H:%M:%S')
    return "CN=" + getCN(cert) + " (cert #" + str(idx) + ") valid to " + cert_date2text(cert.get_notAfter())

parser = argparse.ArgumentParser(description='Check if bundle has valid certificates.')
parser.add_argument('--bundle', '--file',
                    action='store',
                    help='SSL certs bundle file to check')
parser.add_argument('--warn',
                    type=int,
                    action='store',
                    help='warning threshold (default: %d days)' % WARN_DAYS)
parser.add_argument('--crit',
                    type=int,
                    action='store',
                    help='critical threshold (default: %d days)' % CRIT_DAYS)
parser.add_argument('--exclude',
                    action='append',
                    help='CNs to exclude from checking')
parser.add_argument('--only',
                    action='append',
                    help='check only listed CNs')
parser.add_argument('--verbose',
                    action='store_true',
                    help='be more verbose (AKA debug)')
args = parser.parse_args()

if args.bundle:
    BUNDLE_FILE = args.bundle

if args.warn:
    WARN_DAYS = args.warn

if args.crit:
    CRIT_DAYS = args.crit

if CRIT_DAYS > WARN_DAYS:
    print("CRIT_DAYS > WARN_DAYS doesn't make any sense")

current_state = STATE_OK
problems = []

warn_timestamp = (datetime.datetime.now() + datetime.timedelta(days=WARN_DAYS)).strftime('%Y%m%d%H%M%SZ')
crit_timestamp = (datetime.datetime.now() + datetime.timedelta(days=CRIT_DAYS)).strftime('%Y%m%d%H%M%SZ')

cert_index = 0
certs_checked = 0
for cert_text in open(BUNDLE_FILE).read().split(SPLIT_STRING)[1:]:
    cert_index += 1
    try:
        cert = crypto.load_certificate(crypto.FILETYPE_PEM, SPLIT_STRING + cert_text)
    except:
        if current_state < STATE_UNKNOWN:
            current_state = STATE_UNKNOWN
            problems = ["unable to load cert #" + str(cert_index)]
        else:
            problems.append("unable to load cert #" + str(cert_index))
        continue

    if args.only and not getCN(cert) in args.only:
        continue
    if args.exclude and getCN(cert) in args.exclude:
        continue

    debug("Checking cert CN=" + getCN(cert))

    not_after = cert.get_notAfter().decode("utf-8")

    if warn_timestamp >= not_after:
        if crit_timestamp < not_after:
            if current_state < STATE_WARNING:
                current_state = STATE_WARNING
                problems = [cert2status(cert_index, cert)]
            elif current_state == STATE_WARNING:
                problems.append(cert2status(cert_index, cert))
        else:
            if current_state < STATE_CRITICAL:
                current_state = STATE_CRITICAL
                problems = [cert2status(cert_index, cert)]
            elif current_state == STATE_CRITICAL:
                problems.append(cert2status(cert_index, cert))

    certs_checked += 1

print(["OK", "WARN:", "CRIT:", "UNKNOWN:"][current_state], "; ".join(problems), "|certs_checked=" + str(certs_checked))
exit(current_state)
